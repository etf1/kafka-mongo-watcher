// Code generated by MockGen. DO NOT EDIT.
// Source: internal/kafka/client.go

package kafka

import (
	gomock "github.com/golang/mock/gomock"
	kafka "gopkg.in/confluentinc/confluent-kafka-go.v1/kafka"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockClient) EXPECT() *MockClientMockRecorder {
	return _m.recorder
}

// Produce mocks base method
func (_m *MockClient) Produce(message *kafka.Message) error {
	ret := _m.ctrl.Call(_m, "Produce", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce
func (_mr *MockClientMockRecorder) Produce(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Produce", reflect.TypeOf((*MockClient)(nil).Produce), arg0)
}

// Close mocks base method
func (_m *MockClient) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockClientMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}
