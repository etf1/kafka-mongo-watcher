// Code generated by MockGen. DO NOT EDIT.
// Source: internal/mongo/client.go

package mongo

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
	reflect "reflect"
)

// MockMongoDriverCursor is a mock of MongoDriverCursor interface
type MockMongoDriverCursor struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDriverCursorMockRecorder
}

// MockMongoDriverCursorMockRecorder is the mock recorder for MockMongoDriverCursor
type MockMongoDriverCursorMockRecorder struct {
	mock *MockMongoDriverCursor
}

// NewMockMongoDriverCursor creates a new mock instance
func NewMockMongoDriverCursor(ctrl *gomock.Controller) *MockMongoDriverCursor {
	mock := &MockMongoDriverCursor{ctrl: ctrl}
	mock.recorder = &MockMongoDriverCursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMongoDriverCursor) EXPECT() *MockMongoDriverCursorMockRecorder {
	return _m.recorder
}

// Decode mocks base method
func (_m *MockMongoDriverCursor) Decode(val interface{}) error {
	ret := _m.ctrl.Call(_m, "Decode", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (_mr *MockMongoDriverCursorMockRecorder) Decode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Decode", reflect.TypeOf((*MockMongoDriverCursor)(nil).Decode), arg0)
}

// Next mocks base method
func (_m *MockMongoDriverCursor) Next(ctx context.Context) bool {
	ret := _m.ctrl.Call(_m, "Next", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (_mr *MockMongoDriverCursorMockRecorder) Next(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Next", reflect.TypeOf((*MockMongoDriverCursor)(nil).Next), arg0)
}

// Close mocks base method
func (_m *MockMongoDriverCursor) Close(ctx context.Context) error {
	ret := _m.ctrl.Call(_m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockMongoDriverCursorMockRecorder) Close(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockMongoDriverCursor)(nil).Close), arg0)
}

// MockMongoDriverCollection is a mock of MongoDriverCollection interface
type MockMongoDriverCollection struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDriverCollectionMockRecorder
}

// MockMongoDriverCollectionMockRecorder is the mock recorder for MockMongoDriverCollection
type MockMongoDriverCollectionMockRecorder struct {
	mock *MockMongoDriverCollection
}

// NewMockMongoDriverCollection creates a new mock instance
func NewMockMongoDriverCollection(ctrl *gomock.Controller) *MockMongoDriverCollection {
	mock := &MockMongoDriverCollection{ctrl: ctrl}
	mock.recorder = &MockMongoDriverCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMongoDriverCollection) EXPECT() *MockMongoDriverCollectionMockRecorder {
	return _m.recorder
}

// Aggregate mocks base method
func (_m *MockMongoDriverCollection) Aggregate(ctx context.Context, pipeline interface{}, opts ...*options.AggregateOptions) (MongoDriverCursor, error) {
	_s := []interface{}{ctx, pipeline}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Aggregate", _s...)
	ret0, _ := ret[0].(MongoDriverCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate
func (_mr *MockMongoDriverCollectionMockRecorder) Aggregate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Aggregate", reflect.TypeOf((*MockMongoDriverCollection)(nil).Aggregate), _s...)
}

// Watch mocks base method
func (_m *MockMongoDriverCollection) Watch(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error) {
	_s := []interface{}{ctx, pipeline}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Watch", _s...)
	ret0, _ := ret[0].(*mongo.ChangeStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockMongoDriverCollectionMockRecorder) Watch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockMongoDriverCollection)(nil).Watch), _s...)
}

// Name mocks base method
func (_m *MockMongoDriverCollection) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (_mr *MockMongoDriverCollectionMockRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Name", reflect.TypeOf((*MockMongoDriverCollection)(nil).Name))
}

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockClient) EXPECT() *MockClientMockRecorder {
	return _m.recorder
}

// Replay mocks base method
func (_m *MockClient) Replay(collection MongoDriverCollection, itemsChan chan *WatchItem) error {
	ret := _m.ctrl.Call(_m, "Replay", collection, itemsChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replay indicates an expected call of Replay
func (_mr *MockClientMockRecorder) Replay(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Replay", reflect.TypeOf((*MockClient)(nil).Replay), arg0, arg1)
}

// Watch mocks base method
func (_m *MockClient) Watch(collection MongoDriverCollection, itemsChan chan *WatchItem) error {
	ret := _m.ctrl.Call(_m, "Watch", collection, itemsChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch
func (_mr *MockClientMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockClient)(nil).Watch), arg0, arg1)
}
