// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metrics/kafka.go

// Package metrics is a generated GoMock package.
package metrics

import (
	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
	reflect "reflect"
)

// MockKafkaRecorder is a mock of KafkaRecorder interface
type MockKafkaRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaRecorderMockRecorder
}

// MockKafkaRecorderMockRecorder is the mock recorder for MockKafkaRecorder
type MockKafkaRecorderMockRecorder struct {
	mock *MockKafkaRecorder
}

// NewMockKafkaRecorder creates a new mock instance
func NewMockKafkaRecorder(ctrl *gomock.Controller) *MockKafkaRecorder {
	mock := &MockKafkaRecorder{ctrl: ctrl}
	mock.recorder = &MockKafkaRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKafkaRecorder) EXPECT() *MockKafkaRecorderMockRecorder {
	return m.recorder
}

// IncKafkaClientProduceSuccessCounter mocks base method
func (m *MockKafkaRecorder) IncKafkaClientProduceSuccessCounter(topic string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncKafkaClientProduceSuccessCounter", topic)
}

// IncKafkaClientProduceSuccessCounter indicates an expected call of IncKafkaClientProduceSuccessCounter
func (mr *MockKafkaRecorderMockRecorder) IncKafkaClientProduceSuccessCounter(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncKafkaClientProduceSuccessCounter", reflect.TypeOf((*MockKafkaRecorder)(nil).IncKafkaClientProduceSuccessCounter), topic)
}

// IncKafkaClientProduceErrorCounter mocks base method
func (m *MockKafkaRecorder) IncKafkaClientProduceErrorCounter(topic string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncKafkaClientProduceErrorCounter", topic)
}

// IncKafkaClientProduceErrorCounter indicates an expected call of IncKafkaClientProduceErrorCounter
func (mr *MockKafkaRecorderMockRecorder) IncKafkaClientProduceErrorCounter(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncKafkaClientProduceErrorCounter", reflect.TypeOf((*MockKafkaRecorder)(nil).IncKafkaClientProduceErrorCounter), topic)
}

// IncKafkaProducerSuccessCounter mocks base method
func (m *MockKafkaRecorder) IncKafkaProducerSuccessCounter(topic string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncKafkaProducerSuccessCounter", topic)
}

// IncKafkaProducerSuccessCounter indicates an expected call of IncKafkaProducerSuccessCounter
func (mr *MockKafkaRecorderMockRecorder) IncKafkaProducerSuccessCounter(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncKafkaProducerSuccessCounter", reflect.TypeOf((*MockKafkaRecorder)(nil).IncKafkaProducerSuccessCounter), topic)
}

// IncKafkaProducerErrorCounter mocks base method
func (m *MockKafkaRecorder) IncKafkaProducerErrorCounter(topic string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncKafkaProducerErrorCounter", topic)
}

// IncKafkaProducerErrorCounter indicates an expected call of IncKafkaProducerErrorCounter
func (mr *MockKafkaRecorderMockRecorder) IncKafkaProducerErrorCounter(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncKafkaProducerErrorCounter", reflect.TypeOf((*MockKafkaRecorder)(nil).IncKafkaProducerErrorCounter), topic)
}

// RegisterOn mocks base method
func (m *MockKafkaRecorder) RegisterOn(registry prometheus.Registerer) KafkaRecorder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOn", registry)
	ret0, _ := ret[0].(KafkaRecorder)
	return ret0
}

// RegisterOn indicates an expected call of RegisterOn
func (mr *MockKafkaRecorderMockRecorder) RegisterOn(registry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOn", reflect.TypeOf((*MockKafkaRecorder)(nil).RegisterOn), registry)
}
