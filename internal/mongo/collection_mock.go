// Code generated by MockGen. DO NOT EDIT.
// Source: internal/mongo/collection.go

// Package mongo is a generated GoMock package.
package mongo

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	options "go.mongodb.org/mongo-driver/mongo/options"
	reflect "reflect"
)

// MockDriverDatabase is a mock of DriverDatabase interface
type MockDriverDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDriverDatabaseMockRecorder
}

// MockDriverDatabaseMockRecorder is the mock recorder for MockDriverDatabase
type MockDriverDatabaseMockRecorder struct {
	mock *MockDriverDatabase
}

// NewMockDriverDatabase creates a new mock instance
func NewMockDriverDatabase(ctrl *gomock.Controller) *MockDriverDatabase {
	mock := &MockDriverDatabase{ctrl: ctrl}
	mock.recorder = &MockDriverDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDriverDatabase) EXPECT() *MockDriverDatabaseMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockDriverDatabase) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockDriverDatabaseMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDriverDatabase)(nil).Name))
}

// MockCollectionAdapter is a mock of CollectionAdapter interface
type MockCollectionAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionAdapterMockRecorder
}

// MockCollectionAdapterMockRecorder is the mock recorder for MockCollectionAdapter
type MockCollectionAdapterMockRecorder struct {
	mock *MockCollectionAdapter
}

// NewMockCollectionAdapter creates a new mock instance
func NewMockCollectionAdapter(ctrl *gomock.Controller) *MockCollectionAdapter {
	mock := &MockCollectionAdapter{ctrl: ctrl}
	mock.recorder = &MockCollectionAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCollectionAdapter) EXPECT() *MockCollectionAdapterMockRecorder {
	return m.recorder
}

// Aggregate mocks base method
func (m *MockCollectionAdapter) Aggregate(ctx context.Context, pipeline interface{}, opts ...*options.AggregateOptions) (DriverCursor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, pipeline}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Aggregate", varargs...)
	ret0, _ := ret[0].(DriverCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate
func (mr *MockCollectionAdapterMockRecorder) Aggregate(ctx, pipeline interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, pipeline}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockCollectionAdapter)(nil).Aggregate), varargs...)
}

// Database mocks base method
func (m *MockCollectionAdapter) Database() DriverDatabase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database")
	ret0, _ := ret[0].(DriverDatabase)
	return ret0
}

// Database indicates an expected call of Database
func (mr *MockCollectionAdapterMockRecorder) Database() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockCollectionAdapter)(nil).Database))
}

// Watch mocks base method
func (m *MockCollectionAdapter) Watch(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions) (DriverCursor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, pipeline}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(DriverCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockCollectionAdapterMockRecorder) Watch(ctx, pipeline interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, pipeline}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockCollectionAdapter)(nil).Watch), varargs...)
}

// Name mocks base method
func (m *MockCollectionAdapter) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockCollectionAdapterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCollectionAdapter)(nil).Name))
}
