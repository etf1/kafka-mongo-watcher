// Code generated by MockGen. DO NOT EDIT.
// Source: internal/mongo/client.go

// Package mongo is a generated GoMock package.
package mongo

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDriverCursor is a mock of DriverCursor interface
type MockDriverCursor struct {
	ctrl     *gomock.Controller
	recorder *MockDriverCursorMockRecorder
}

// MockDriverCursorMockRecorder is the mock recorder for MockDriverCursor
type MockDriverCursorMockRecorder struct {
	mock *MockDriverCursor
}

// NewMockDriverCursor creates a new mock instance
func NewMockDriverCursor(ctrl *gomock.Controller) *MockDriverCursor {
	mock := &MockDriverCursor{ctrl: ctrl}
	mock.recorder = &MockDriverCursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDriverCursor) EXPECT() *MockDriverCursorMockRecorder {
	return m.recorder
}

// Decode mocks base method
func (m *MockDriverCursor) Decode(val interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (mr *MockDriverCursorMockRecorder) Decode(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockDriverCursor)(nil).Decode), val)
}

// Next mocks base method
func (m *MockDriverCursor) Next(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockDriverCursorMockRecorder) Next(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockDriverCursor)(nil).Next), ctx)
}

// Close mocks base method
func (m *MockDriverCursor) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDriverCursorMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDriverCursor)(nil).Close), ctx)
}

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Replay mocks base method
func (m *MockClient) Replay(ctx context.Context, collection CollectionAdapter) (chan *WatchItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replay", ctx, collection)
	ret0, _ := ret[0].(chan *WatchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replay indicates an expected call of Replay
func (mr *MockClientMockRecorder) Replay(ctx, collection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replay", reflect.TypeOf((*MockClient)(nil).Replay), ctx, collection)
}

// Watch mocks base method
func (m *MockClient) Watch(ctx context.Context, collection CollectionAdapter) (chan *WatchItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, collection)
	ret0, _ := ret[0].(chan *WatchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockClientMockRecorder) Watch(ctx, collection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClient)(nil).Watch), ctx, collection)
}
